.PHONY: all clean setup build compile-asm compile-c compile-cpp link

PATH_SOURCE = $(CURDIR)
PATH_SOURCE_ASM = ${PATH_SOURCE}/asm
PATH_SOURCE_C = ${PATH_SOURCE}/c
PATH_SOURCE_CPP = ${PATH_SOURCE}/cpp

PATH_BUILD = ../../build/intel64
PATH_BUILD_BIN = ${PATH_BUILD}/bin
PATH_BUILD_ASM = ${PATH_BUILD}/asm
PATH_BUILD_C = ${PATH_BUILD}/c
PATH_BUILD_CPP = ${PATH_BUILD}/cpp

PATH_LIST_INCLUDE_ASM = ${PATH_SOURCE_ASM} ${PATH_BUILD_ASM}
PATH_LIST_INCLUDE_C = ${PATH_SOURCE_C} ${PATH_SOURCE_CPP}
PATH_LIST_INCLUDE_CPP = ${PATH_SOURCE_CPP} ${PATH_SOURCE_C}

all: clean build

clean:
	set -e
	rm -rf ${PATH_BUILD}

setup:
	set -e
	mkdir -p ${PATH_BUILD}
	mkdir -p ${PATH_BUILD_BIN}
	mkdir -p ${PATH_BUILD_ASM}
	mkdir -p ${PATH_BUILD_C}
	mkdir -p ${PATH_BUILD_CPP}

build: link

COMPILE_ASM_SOURCE_LIST_ASM = $(patsubst ${PATH_SOURCE_ASM}/%.asm, %, $(wildcard ${PATH_SOURCE_ASM}/*.asm))

COMPILE_ASM_FLAG_LIST_COMMON = -f elf32
COMPILE_ASM_FLAG_LIST_INCLUDE = $(addprefix -I , $(wordlist 1, $(words ${PATH_LIST_INCLUDE_ASM}), ${PATH_LIST_INCLUDE_ASM}))

COMPILE_ASM_PATTERN_SOURCE = ${PATH_SOURCE_ASM}/${name}.asm
COMPILE_ASM_PATTERN_BUILD = ${PATH_BUILD_ASM}/${name}.bin

compile-asm: setup
	$(foreach name, ${COMPILE_ASM_SOURCE_LIST_ASM}, \
	nasm ${COMPILE_ASM_FLAG_LIST_COMMON} ${COMPILE_ASM_FLAG_LIST_INCLUDE} ${COMPILE_ASM_PATTERN_SOURCE} -o ${COMPILE_ASM_PATTERN_BUILD};)

COMPILE_C_SOURCE_LIST = $(patsubst ${PATH_SOURCE_C}/%.c, %, $(wildcard ${PATH_SOURCE_C}/*.c))

COMPILE_C_FLAG_LIST_COMMON = -O0 -std=gnu17 -ffreestanding -Wall
COMPILE_C_FLAG_LIST_INCLUDE = $(addprefix -I , $(wordlist 1, $(words ${DIRS_INCLUDE_C}), ${DIRS_INCLUDE_C}))

COMPILE_C_PATTERN_SOURCE = ${PATH_SOURCE_C}/${name}.c
COMPILE_C_PATTERN_BUILD = ${PATH_BUILD_C}/${name}.o

compile-c:
	$(foreach name, ${COMPILE_C_SOURCE_LIST}, \
	i686-elf-gcc ${COMPILE_C_FLAG_LIST_COMMON} ${COMPILE_C_FLAG_LIST_INCLUDE} -c ${COMPILE_C_PATTERN_SOURCE} -o ${COMPILE_C_PATTERN_BUILD};)

COMPILE_CPP_SOURCE_LIST = $(patsubst ${PATH_SOURCE_CPP}/%.cpp, %, $(wildcard ${PATH_SOURCE_CPP}/*.cpp))

COMPILE_CPP_FLAG_LIST_COMMON = -O0 -std=gnu++17 -ffreestanding -Wall
COMPILE_CPP_FLAG_LIST_INCLUDE = $(addprefix -I , $(wordlist 1, $(words ${DIRS_INCLUDE_CPP}), ${DIRS_INCLUDE_CPP}))

COMPILE_CPP_PATTERN_SOURCE = ${PATH_SOURCE_CPP}/${name}.cpp
COMPILE_CPP_PATTERN_BUILD = ${PATH_BUILD_CPP}/${name}.o

compile-cpp:
	$(foreach name, ${COMPILE_CPP_SOURCE_LIST}, \
	i686-elf-g++ ${COMPILE_CPP_FLAG_LIST_COMMON} ${COMPILE_CPP_FLAG_LIST_INCLUDE} -c ${COMPILE_CPP_PATTERN_SOURCE} -o ${COMPILE_CPP_PATTERN_BUILD};)

LINK_PATH_SCRIPT = ${PATH_SOURCE}/default.ld

LINK_FLAG_LIST_COMMON = -nostdlib

LINK_BUILD_LIST_ASM = $(wildcard ${PATH_BUILD_ASM}/*.bin)
LINK_BUILD_LIST_C = $(wildcard ${PATH_BUILD_C}/*.o)
LINK_BUILD_LIST_CPP = $(wildcard ${PATH_BUILD_CPP}/*.o)

LINK_BIN_BOOTLOADER_FILE = ${PATH_BUILD_BIN}/kernel.bin

link: compile-asm compile-c compile-cpp
	i686-elf-gcc -T ${LINK_PATH_SCRIPT} ${LINK_FLAG_LIST_COMMON} ${LINK_BUILD_LIST_ASM} ${LINK_BUILD_LIST_C} ${LINK_BUILD_LIST_CPP} -o ${LINK_BIN_BOOTLOADER_FILE}