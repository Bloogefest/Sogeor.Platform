.PHONY: all setup clean x86_64 x86_64-setup x86_64-clean x86_64-compile-asm x86_64-compile-c x86_64-compile-cpp x86_64-link

ANY_DIR_BUILD = build

ANY_DIR_SOURCE = src
ANY_DIR_SOURCE_ASM = ${ANY_DIR_SOURCE}/asm
ANY_DIR_SOURCE_C = ${ANY_DIR_SOURCE}/c
ANY_DIR_SOURCE_CPP = ${ANY_DIR_SOURCE}/cpp

ANY_DIRS_INCLUDE_ASM = ${ANY_DIR_SOURCE_ASM}
ANY_DIRS_INCLUDE_C = ${ANY_DIR_SOURCE_C} ${ANY_DIR_SOURCE_CPP}
ANY_DIRS_INCLUDE_CPP = ${ANY_DIR_SOURCE_CPP} ${ANY_DIR_SOURCE_C}

all: x86_64

setup:
	set -e
	mkdir -p ${ANY_DIR_BUILD}

clean:
	rm -rf ${ANY_DIR_BUILD}

X86_64_DIR_BUILD = ${ANY_DIR_BUILD}/x86_64
X86_64_DIR_BUILD_ASM = ${X86_64_DIR_BUILD}/asm
X86_64_DIR_BUILD_C = ${X86_64_DIR_BUILD}/c
X86_64_DIR_BUILD_CPP = ${X86_64_DIR_BUILD}/cpp

X86_64_DIRS_INCLUDE_ASM = ${ANY_DIRS_INCLUDE_ASM} ${X86_64_DIR_BUILD_ASM}
X86_64_DIRS_INCLUDE_C = ${ANY_DIRS_INCLUDE_C}
X86_64_DIRS_INCLUDE_CPP = ${ANY_DIRS_INCLUDE_CPP}

x86_64: x86_64-setup x86_64-link

x86_64-setup: setup x86_64-clean
	mkdir ${X86_64_DIR_BUILD}
	mkdir ${X86_64_DIR_BUILD_ASM}
	mkdir ${X86_64_DIR_BUILD_C}
	mkdir ${X86_64_DIR_BUILD_CPP}

x86_64-clean:
	rm -rf ${X86_64_DIR_BUILD}

X86_64_COMPILE_ASM_SOURCES_ASM = $(patsubst ${ANY_DIR_SOURCE_ASM}/%.asm, %, $(wildcard ${ANY_DIR_SOURCE_ASM}/*.asm))

X86_64_COMPILE_ASM_FLAGS_COMMON = -f elf64
X86_64_COMPILE_ASM_FLAGS_INCLUDE = $(addprefix -I , $(wordlist 1, $(words ${X86_64_DIRS_INCLUDE_ASM}), ${X86_64_DIRS_INCLUDE_ASM}))

X86_64_COMPILE_ASM_PATTERN_SOURCE_ASM = ${ANY_DIR_SOURCE_ASM}/${name}.asm
X86_64_COMPILE_ASM_PATTERN_BUILD_ASM = ${X86_64_DIR_BUILD_ASM}/${name}.bin

x86_64-compile-asm:
	$(foreach name, ${X86_64_COMPILE_ASM_SOURCES_ASM}, \
	nasm ${X86_64_COMPILE_ASM_FLAGS_COMMON} ${X86_64_COMPILE_ASM_FLAGS_INCLUDE} ${X86_64_COMPILE_ASM_PATTERN_SOURCE_ASM} -o ${X86_64_COMPILE_ASM_PATTERN_BUILD_ASM};)

X86_64_COMPILE_C_SOURCES_C = $(patsubst ${ANY_DIR_SOURCE_C}/%.c, %, $(wildcard ${ANY_DIR_SOURCE_C}/*.c))

X86_64_COMPILE_C_FLAGS_COMMON = -O0 -std=gnu17 -ffreestanding -Wall
X86_64_COMPILE_C_FLAGS_INCLUDE = $(addprefix -I , $(wordlist 1, $(words ${X86_64_DIRS_INCLUDE_C}), ${X86_64_DIRS_INCLUDE_C}))

X86_64_COMPILE_C_PATTERN_SOURCE_C = ${ANY_DIR_SOURCE_C}/${name}.c
X86_64_COMPILE_C_PATTERN_BUILD_C = ${X86_64_DIR_BUILD_C}/${name}.o

x86_64-compile-c:
	$(foreach name, ${X86_64_COMPILE_C_SOURCES_C}, \
	x86_64-elf-gcc ${X86_64_COMPILE_C_FLAGS_COMMON} ${X86_64_COMPILE_C_FLAGS_INCLUDE} -c ${X86_64_COMPILE_C_PATTERN_SOURCE_C} -o ${X86_64_COMPILE_C_PATTERN_BUILD_C};)

X86_64_COMPILE_CPP_SOURCES_CPP = $(patsubst ${ANY_DIR_SOURCE_CPP}/%.cpp, %, $(wildcard ${ANY_DIR_SOURCE_CPP}/*.cpp))

X86_64_COMPILE_CPP_FLAGS_COMMON = -O0 -std=gnu++17 -ffreestanding -Wall
X86_64_COMPILE_CPP_FLAGS_INCLUDE = $(addprefix -I , $(wordlist 1, $(words ${X86_64_DIRS_INCLUDE_CPP}), ${X86_64_DIRS_INCLUDE_CPP}))

X86_64_COMPILE_CPP_PATTERN_SOURCE_CPP = ${ANY_DIR_SOURCE_CPP}/${name}.cpp
X86_64_COMPILE_CPP_PATTERN_BUILD_CPP = ${X86_64_DIR_BUILD_CPP}/${name}.o

x86_64-compile-cpp:
	$(foreach name, ${X86_64_COMPILE_CPP_SOURCES_CPP}, \
	x86_64-elf-g++ ${X86_64_COMPILE_CPP_FLAGS_COMMON} ${X86_64_COMPILE_CPP_FLAGS_INCLUDE} -c ${X86_64_COMPILE_CPP_PATTERN_SOURCE_CPP} -o ${X86_64_COMPILE_CPP_PATTERN_BUILD_CPP};)

X86_64_LINK_FILE_SCRIPT = x86_64.ld

X86_64_LINK_FLAGS_COMMON = -nostdlib

X86_64_LINK_FILES_BUILD_ASM = $(wildcard ${X86_64_DIR_BUILD_ASM}/*.bin)
X86_64_LINK_FILES_BUILD_C = $(wildcard ${X86_64_DIR_BUILD_C}/*.o)
X86_64_LINK_FILES_BUILD_CPP = $(wildcard ${X86_64_DIR_BUILD_CPP}/*.o)

X86_64_LINK_FILE_OUTPUT = ${X86_64_DIR_BUILD}/bootloader.bin

x86_64-link: x86_64-compile-asm x86_64-compile-c x86_64-compile-cpp
	x86_64-elf-gcc -T ${X86_64_LINK_FILE_SCRIPT} ${X86_64_LINK_FLAGS_COMMON} ${X86_64_LINK_FILES_BUILD_ASM} ${X86_64_LINK_FILES_BUILD_C} ${X86_64_LINK_FILES_BUILD_CPP} -o ${X86_64_LINK_FILE_OUTPUT}